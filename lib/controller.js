// Generated by CoffeeScript 1.9.3

/**
 * 一款给 express 4.x 定制的路由控制器
 * @author pangjg
 * @date 2015-08-20
 */
var fs, main;

fs = require('fs');

main = {
  setDirectory: function(directory) {
    this.directory = directory;
    this.pathParams = {};
    this.pathFunctions = {};
    this.pathMiddlewares = {};
    return this;
  },

  /**
   * app事件代理函数
   * @param  {keyValueObject} app = express() ，express的实例
   * @param  {Function} cb  回调函数
   */
  bind: function(app, cb) {
    var _app, _this;
    _app = app;
    _this = this;
    return fs.readdir(_this.directory, function(err, dirs) {
      if (err) {
        cb && cb(err);
        return false;
      }
      dirs.forEach(function(file) {
        var _params, aliases, controller, controllerFunction, f, fileName, key, middlewareFunctions, results, val;
        fileName = _this.directory + '/' + file;
        if (fileName.indexOf('Controller') === -1 || fileName.indexOf('.js') === -1) {
          return false;
        }
        controller = require(fileName);
        aliases = controller['aliases'] || [];
        delete controller['aliases'];
        aliases.push(_this.translateFileNameToControllerName(file));
        results = [];
        for (key in controller) {
          val = controller[key];
          f = val;
          middlewareFunctions = void 0;
          if (Array.isArray(f)) {
            if (f.length === 1) {
              f = f[0];
            } else if (f.length > 1) {
              controllerFunction = f.pop();
              middlewareFunctions = f;
              f = controllerFunction;
            } else {
              throw new Error('控制器未定义');
            }
          }
          _params = _this.translateFunctionBodyToParameterArray(f);
          results.push(aliases.forEach(function(alias) {
            var _path;
            _path = _this.translatePath(key, alias, _params);
            if (_path !== false) {
              _this.pathMiddlewares[_path.method.toLowerCase() + _path.path] = middlewareFunctions;
              return _this.bindFunction(_app, _path, _params, f);
            }
          }));
        }
        return results;
      });
      return cb && cb();
    });
  },

  /**
   * 代理app的访问请求
   * @param  {keyValueObject}  app = express()，express的实例
   * @param  {strings} path   访问路径
   * @param  {object} params  访问形参
   * @param  {Array} f  controller控制器列表数组
   */
  bindFunction: function(app, path, params, f) {
    var _this, pathKey;
    _this = this;
    pathKey = path.method.toLowerCase() + path.path;
    _this.pathParams[pathKey] = params;
    _this.pathFunctions[pathKey] = f;
    if (_this.pathMiddlewares[pathKey] && Array.isArray(_this.pathMiddlewares[pathKey])) {
      return app[path.method.toLowerCase()](path.path, _this.pathMiddlewares[pathKey], function(req, res) {
        var clonedParams, reqKey;
        reqKey = req.method.toLowerCase() + req.route.path;
        clonedParams = _this.pathParams[reqKey].slice(0);
        clonedParams = _this.translateKeysArrayToValuesArray(clonedParams, req.params);
        clonedParams.unshift(req, res);
        return _this.pathFunctions[reqKey].apply(_this, clonedParams);
      });
    } else {
      return app[path.method.toLowerCase()](path.path, function(req, res) {
        var clonedParams, reqKey;
        reqKey = req.method.toLowerCase() + req.route.path;
        clonedParams = _this.pathParams[reqKey].slice(0);
        clonedParams = _this.translateKeysArrayToValuesArray(clonedParams, req.params);
        clonedParams.unshift(req, res);
        return _this.pathFunctions[reqKey].apply(_this, clonedParams);
      });
    }
  },

  /**
   * 转换对象数组为数组对象
   * @param  {object} keysArray  URL请求形参构成的数组
   * @param  {Array} keyValueObject  URL请求形参和请求值构成的对象
   * @return {Array} 返回数组
   */
  translateKeysArrayToValuesArray: function(keysArray, keyValueObject) {
    var valuesArray;
    valuesArray = [];
    keysArray.forEach(function(key) {
      return valuesArray.push(keyValueObject[key]);
    });
    return valuesArray;
  },

  /**
   * 将函数体的形参转换为数组
   * @param  {strings} f 函数体
   * @return {Array}  形参数组
   */
  translateFunctionBodyToParameterArray: function(f) {
    var params;
    if (typeof f === 'function') {
      params = f.toString().replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s))/mg, '').match(/^function\s*[^\(]*\(\s*([^\)]*)\)/m)[1].split(/,/);
      if (params.length >= 2) {
        params.splice(0, 2);
        return params;
      } else {
        throw new Error('控制器缺少参数');
      }
    } else {
      throw new Error('控制器对象必须是函数');
    }
  },

  /**
   * 转换文件名为控制器名
   * @param  {strings} fileName 文件名
   * @return {strings} 控制器名
   */
  translateFileNameToControllerName: function(fileName) {
    return fileName.slice(0, fileName.lastIndexOf('.')).replace('Controller', '');
  },

  /**
   * 将访问路径转换为形参对象
   * @param  {strings} methodName     方法名  get or post
   * @param  {strings} controllerName 控制器名
   * @param  {Array} parameters     形参
   * @return {object}           返回一个对象
   */
  translatePath: function(methodName, controllerName, parameters) {
    var method, obj, parts, path;
    parameters = parameters || [];
    controllerName = controllerName.toLowerCase();
    parts = methodName.split('_');
    method = parts[0].toLowerCase();
    if (['get', 'post', 'put', 'delete'].indexOf(method) === -1 || parts.length === 0) {
      return false;
    }
    parts.splice(0, 1);
    path = '/';
    if (controllerName !== 'home') {
      path += controllerName;
    }
    parts.forEach(function(part) {
      var separator;
      if (part === 'index') {
        return path += controllerName !== 'home' && method === 'get' ? '.html' : '';
      } else {
        separator = !!~parameters.indexOf(part) ? '/:' : '/';
        if (separator === '/') {
          part = part.replace(/([A-Z])/g, '-$1').toLowerCase();
        }
        return path += separator + part;
      }
    });
    parameters.forEach(function(parameter) {
      if (!~parts.indexOf(parameter)) {
        return path += "/:" + parameter;
      }
    });
    path += method === 'get' && path.lastIndexOf('/') > '0' ? ".html" : "";
    obj = {
      path: path,
      method: method
    };
    return obj;
  }
};

module.exports = main;
