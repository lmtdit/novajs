// Generated by CoffeeScript 1.9.3

/**
* Basic tools
* @date 2014-12-2 15:10:14
* @author pjg <iampjg@gmail.com>
* @link http://pjg.pw
* @version $Id$
 */
var Buffer, Tools, _, _cssPath, _env, _imgPath, _jsPath, _url, crypto, fs, http, https, key, path, queryStr, setting;

fs = require('fs');

path = require('path');

_url = require("url");

http = require('http');

https = require('https');

Buffer = require('buffer').Buffer;

queryStr = require('querystring');

crypto = require('crypto');

_ = require('lodash');

setting = require('./setting');

_env = setting.env;

_jsPath = setting.staticPaths.js;

_cssPath = setting.staticPaths.css;

_imgPath = setting.staticPaths.img;

key = "%#12ds)*(shenba_2015";

Tools = {};

Tools.md5 = function(source) {
  var _buf, _str;
  _buf = new Buffer(source);
  _str = _buf.toString("binary");
  return crypto.createHash('md5').update(_str).digest('hex');
};


/**
* make dir
 */

Tools.mkdirsSync = function(dirpath, mode) {
  if (fs.existsSync(dirpath)) {
    return true;
  } else {
    if (Tools.mkdirsSync(path.dirname(dirpath), mode)) {
      fs.mkdirSync(dirpath, mode);
      return true;
    }
  }
};


/**
* make dirs
 */

Tools.mkdirs = function(dirpath, mode, callback) {
  return fs.exists(dirpath, function(exists) {
    if (exists) {
      return callback(exists);
    } else {
      return Tools.mkdirs(path.dirname(dirpath), mode, function() {
        return fs.mkdir(dirpath, mode, callback);
      });
    }
  });
};


/**
 * obj mixin function
 * Example:
 * food = { 'key': 'apple' }
 * food2 = { 'name': 'banana', 'type': 'fruit' }
 * console.log objMixin(food2,food)
 * console.log objMixin(food,food2)
 */

Tools.objMixin = _.partialRight(_.assign, function(a, b) {
  var val;
  val = typeof a === 'undefined' ? b : a;
  return val;
});

Tools.getFileSync = function(file, encoding) {
  var _encoding, fileCon, stats;
  _encoding = encoding || 'utf8';
  fileCon = '';
  if (fs.existsSync(file)) {
    stats = fs.statSync(file);
    if (stats.isFile()) {
      fileCon = fs.readFileSync(file, _encoding);
    }
  }
  return fileCon;
};

Tools.getJSONSync = function(file) {
  var string;
  string = fs.readFileSync(file, 'utf8');
  return JSON.parse(string, true);
};

Tools.getUrl = function(url, callback, errback) {
  var HttpType, option, resultData;
  resultData = '';
  option = _url.parse(url);
  HttpType = option.protocol.indexOf('https') > -1 ? https : http;
  return HttpType.get(url, function(res) {
    res.setEncoding('utf8');
    res.on('data', function(data) {
      return resultData += data;
    });
    return res.on('end', function() {
      return callback && callback(resultData);
    });
  }).on('error', function(e) {
    return errback && errback(e.message);
  });
};

Tools.postUrl = function(url, data, headers, callback, errback) {
  var HttpType, option, req, resultData, sendData;
  resultData = '';
  option = _url.parse(url);
  sendData = _.isObject(data) ? queryStr.stringify(data) : data;
  option.method = 'POST';
  option.headers = {
    "Content-Type": 'application/x-www-form-urlencoded',
    "Content-Length": sendData.length
  };
  if (headers) {
    option.headers = _.assign(option.headers, headers);
  }
  HttpType = option.protocol === 'http:' ? http : https;
  req = HttpType.request(option, function(res) {
    res.setEncoding('utf8');
    res.on('data', function(data) {
      return resultData += data;
    });
    return res.on('end', function() {
      return callback && callback(resultData);
    });
  });
  req.on('error', function(e) {
    return errback && errback(e.message);
  });
  req.write(sendData + "\n");
  return req.end();
};

Tools.getJSON = function(url, callback, errback) {
  return Tools.getUrl(url, function(data) {
    var e, json;
    json = null;
    try {
      json = JSON.parse(data);
    } catch (_error) {
      e = _error;
      errback && errback(e);
      return false;
    }
    return callback && callback(json);
  }, errback);
};

Tools.deepDo = function(list, deepFunc, cumulateFunc, callback, deep) {
  deep = deep || 0;
  if (!list[deep]) {
    if (callback) {
      callback();
    }
    return;
  }
  return deepFunc(list[deep], function(result) {
    if (cumulateFunc) {
      cumulateFunc(result, list[deep], deep);
    }
    if (deep + 1 < list.length) {
      return Tools.deepDo(list, deepFunc, cumulateFunc, callback, deep + 1);
    } else {
      return callback && callback();
    }
  });
};

Tools.exec = function(command, callback) {
  return exec(command, function(error, stdout, stderr) {
    if (stdout) {
      console.log('exec stdout: ' + stdout);
    }
    if (stderr) {
      console.log('exec stderr: ' + stderr);
    }
    if (error) {
      console.log('exec error: ' + error);
    }
    if (callback) {
      return callback();
    }
  });
};

Tools.enCrypto = function(str, secret) {
  var _secret, cipher, enc;
  _secret = secret || key;
  cipher = crypto.createCipher('aes192', _secret);
  enc = cipher.update(str, 'utf8', 'hex');
  enc += cipher.final('hex');
  return enc;
};

Tools.deCrypto = function(str, secret) {
  var _secret, dec, decipher;
  _secret = secret || key;
  decipher = crypto.createDecipher('aes192', _secret);
  dec = decipher.update(str, 'hex', 'utf8');
  dec += decipher.final('utf8');
  return dec;
};


/**
 * 获取js/css/img的map
 * @type {srting}  css or js or img
 */

Tools.getMap = function(type) {
  var _map, _mapName, _mapPath, e;
  _map = {};
  _mapName = (function() {
    switch (type) {
      case 'js':
        return 'jslibs.json';
      case 'css':
        return 'cssmap.json';
      case 'img':
        return 'cssbgmap.json';
    }
  })();
  _mapPath = path.join(__dirname, '..', 'map', _mapName);
  try {
    _map = Tools.getJSONSync(_mapPath);
  } catch (_error) {
    e = _error;
    console.log(e);
  }
  return _map;
};

Tools.getStaticMaps = function() {
  return Tools.objMixin(Tools.getMap('css'), Tools.getMap('js'));
};


/**
 * 构造 css 资源路径
 * @param {string} cssList css列表
 * @example
 * cssList = 'main.css,index.css'
 */

Tools.init_css = function(cssList) {
  var _arr, _cssLinks, _cssMap, _timestamp;
  _cssLinks = '';
  _cssMap = Tools.getMap('css');
  _arr = cssList.split(',');
  _timestamp = String(new Date().getTime()).substr(0, 8);
  _arr.forEach(function(key) {
    var val;
    val = _env !== 'local' && _.has(_cssMap, key) ? _cssMap[key].distname : key + "?t=" + _timestamp;
    return _cssLinks += "<link href='" + _cssPath + "/" + val + "' rel='stylesheet' type='text/css' />";
  });
  return _cssLinks + ("<script>" + setting.GLOBALVARS + "</script>");
};


/**
 * 构造 js 资源路径
 * @param {string} jsList js列表
 * @example
 * jsList = 'sb.corelibs.js,sb.app_index.js,piwik.js'
 */

Tools.init_js = function(jsList) {
  var _arr, _jsLinks, _jsMap, _reqJs, _timestamp;
  _jsLinks = "";
  _jsMap = Tools.getMap('js');
  _arr = jsList.split(',');
  _timestamp = String(new Date().getTime()).substr(0, 8);
  _reqJs = "<script src='" + _jsPath + "/vendor/require/require.js?v=2.5'></script>";
  _reqJs += "<script src='" + _jsPath + "/vendor/Zepto/zepto.js?v=2.5'></script>";
  _reqJs += "<script src='" + _jsPath + "/require_cfg.js?t=" + _timestamp + "'></script>";
  if (_env === 'local') {
    _jsLinks = _reqJs;
  }
  _arr.forEach(function(key) {
    var _modName, val;
    if (_env === 'local') {
      if (key.indexOf('sb.') !== 0) {
        val = key + "?t=" + _timestamp;
        return _jsLinks += "<script src='" + _jsPath + "/" + val + "'></script>";
      } else {
        _modName = key.replace('sb.', '').replace('.js', '').replace(/\_/g, '/');
        return key !== 'sb.corelibs.js' && (_jsLinks += "<script>require(['" + _modName + "'])</script>");
      }
    } else {
      val = _.has(_jsMap, key) ? _jsMap[key].distname : key + "?t=" + _timestamp;
      return _jsLinks += "<script src='" + _jsPath + "/" + val + "'></script>";
    }
  });
  return _jsLinks;
};

Tools.init_img = function(imgName) {
  var _imgMap, _timestamp, _val;
  _imgMap = Tools.getMap('img');
  _timestamp = String(new Date().getTime()).substr(0, 8);
  _val = _env !== 'local' && _.has(_imgMap, imgName) ? _imgMap[imgName].distname : imgName + "?t=" + _timestamp;
  return _imgPath + "/" + _val;
};

Tools.pageRender = function(res, data, tpl) {
  data = data || {};
  tpl && (data.view = tpl);
  data.env = _env;
  data.domains = setting.domains;
  data.staticPaths = setting.staticPaths;
  data.init_css = Tools.init_css;
  data.init_js = Tools.init_js;
  data.init_img = Tools.init_img;
  return res.render && res.render(data.view, data);
};

Tools.errorRender = function(res, data) {
  data = data || {};
  data.view = 'error';
  data.url = req.originalUrl;
  data.error = {
    message: _flashData.desc,
    status: _flashData.code
  };
  return res.render && res.render(data.view, data);
};

module.exports = Tools;
